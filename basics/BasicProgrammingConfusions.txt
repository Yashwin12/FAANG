1) return null; vs return;
// HACK: https://stackoverflow.com/questions/8749091/should-a-function-use-return-null
If you don't return anything, just use return; or omit it at all at the end of the function.
If your function usually returns something ( non-premitive data type ) but doesn't for some reason, return null; is the way to go.

//HACK: https://stackoverflow.com/questions/17221759/returning-null-in-a-method-whose-signature-says-return-int
Also method returning primitive data type can't return null; 

2) Primitive vs non-primitive Data Type: 
https://www.edureka.co/blog/data-types-in-java/#Non-PrimitiveDataTypes

3) BINARY TREE VS BINARY SEARCH TREE (BST):

A binary tree is a non linear data structure where each node can have at most 2 child nodes. ... Binary search tree is a binary tree in which a node have a value greater than all values in its left subtree and smaller than all values in its right subtree.

4) Binary Search:
Binary search is an efficient algorithm for finding an item from a sorted list of items. Refer BinarySearchAlgo.java

5) Skewed Tree 
A skewed tree is a tree where each node has only one child node or none. A binary tree, which is dominated solely by ( chain of ) left child nodes or right child nodes, is called a skewed binary tree, more specifically left skewed binary tree, or right skewed binary tree.

6) Generics in java
It would be nice if we could write a single sort method that could sort the elements in an Integer array, a String array, or an array of any type that supports ordering.
Java Generic methods and generic classes enable programmers to specify, with a single method declaration, a set of related methods, or with a single class declaration, a set of related types, respectively.

7) Synchronization 
When some thing is synchronized, then multiple threads can access, and modify it with out any problem or side effect. 

8) Java sorting methods
Java uses Dual-Pivot Quicksort for primitive data type -> T: O(n*logn) | S: O(1) OR to be precise O(logn).
Java uses MergeSort for Collections or Object[] sort.

9) Runtime of Arrays vs HashMaps:
Arrays will usually be faster than Collections classes. Arrays are faster when the indexes are known (HashMap uses an array of linked lists behind the scenes which adds a bit of overhead above the hashing operations that need to be done)

10) One needs to override hashCode and equals method in a CLASS for below reasons: (For reference refer to 994.java )
    a) Without overriding "equals", "contains" method uses reference equality. If the objects are distinct instances with the same fields then contains will return false. 
    b) Java have a rule "If two objects are equal using Object class equals method, then the hashcode method should give the same value for these two objects"
        
    Summary : One must override hashCode() in every class that overrides equals(). Failure to do so will result in a violation of the general contract for Object.hashCode(), which will prevent one's class from functioning properly in conjunction with all hash-based collections, including HashMap, HashSet, and Hashtable.

    HACK: Refer to 3 upvoted ans on https://stackoverflow.com/questions/2265503/why-do-i-need-to-override-the-equals-and-hashcode-methods-in-java

11) Difference between == and .equals() method in Java
    We can use == operators for reference/ address comparison  and .equals() method for content/ value comparison. In simple words, == checks if both objects point to the same memory location whereas .equals() evaluates to the comparison of values in the objects.

    HACK: https://www.geeksforgeeks.org/difference-equals-method-java/

12) Post-increment vs Pre-increment: 
    HACK:  https://stackoverflow.com/questions/16869020/pre-increment-vs-post-increment-in-array

13) Auxiliary Space: 
    Auxiliary Space is the extra space or temporary space used by an algorithm. Space Complexity of an algorithm is total space taken by the algorithm with respect to the input size.

14) To generate a random number in a given range:
    // HACK: https://www.baeldung.com/java-generating-random-numbers-in-range

    // Math.random() gives value in [0,1] range. Give range for a random number to be in. For example [min, max] = [0,7].
    
    int j = (int) ((Math.random() * (max - min)) + min); 

    OR 
    Random random = new Random();
    return random.nextInt(max - min) + min;

// HACK: https://www.youtube.com/watch?v=_i_nTcwyh-E
15) Top-down vs bottom-up approach:
    Top-down => Recursion + memoization: 
        fib(4): fib(4) => fib(3) => fib(2) => fib(1) => fib(0) (Base Case)

    Bottom-up => Usually uses table or array to store value. Starts with the base case and then solves the ending problem. 
        fib(4): fib(0) (Base Case) => fib(1) => fib(2) => fib(3) => fib(4)

// HACK: https://www.youtube.com/watch?v=3vU6kAa2mnI
16) Floyd's Tortoise and Hare Algorithm:
    This is mainly used to find loop/ cycle in the Linked List.    

// HACK: https://www.youtube.com/watch?v=n5QY3x_GNDg
17) Boyer-Moore Voting Algorithm:
    This is used to find majority element in a list. (Refer 169.java)

18) BFS, DFS implementation:
    BFS => Queue
    DFS => Recursion OR Stack

// HACK: https://www.youtube.com/watch?v=D6dCOa_gMoY
19) Knuth-Morris-Pratt (KMP) string matching algorithm: 
    In real world KMP algorithm is used in those applications where pattern matching is done in long strings, whose symbols are taken from an alphabet with little cardinality. A relevant example is the DNA alphabet, which consists on only 4 symbols (A,C,G,T). Imagine how KMP can work in a "DNA pattern matching problem": it is really suitable because many repetition of the same letter allows many jumps, and so less computation time wasted.

// HACK: https://stackoverflow.com/questions/8790809/whats-the-difference-between-primitive-and-reference-types
20) Primitive vs Reference Types: 
    Primitive types are the basic types of data: byte, short, int, long, float, double, boolean, char. Primitive variables store primitive values. Reference types are any instantiable class as well as arrays: String, Scanner, Random, Die, int[], String[], etc. Reference variables store addresses to locations in memory for where the data is stored.

// HACK: https://adrianmejia.com/data-structures-for-beginners-graphs-time-complexity-tutorial/#Graph.removeVertex
// HACK: https://www.geeksforgeeks.org/implementing-generic-graph-in-java/
21) Graph basics: 
    Three common Graph properties: 
        a) Connected/ disConnected Graphs
        b) Directed/ Undirected Graphs
        c) Cyclic/ Acyclic Graphs

    Primary ways to represent graph: 
        a) Adjancency List
        b) Adjancency Matrix
    
    Graph Traversals: 
        a) BFS: Usually used to find shortest shortest distance between nodes(vertexes) & edges.
        b) DFS

    TREE Traversals: 
        a) In-Order: ( left -> current -> right)
        b) Pre-Order: ( current -> left -> right)
        c) Post-Order: ( left -> right -> current)

    NOTE: Tree is a directed( parent to child), Connected and Acyclic type of graph.    

// HACK: https://www.youtube.com/watch?v=cIBFEhD77b4
22) Kahn's Algorithm for Topological Sorting (Refer 210.java & CyclesInGraph.java ): 
    Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge uv, vertex u comes before v in the ordering. Topological Sorting for a graph is not possible if the graph is not a DAG.

23) Pass-by-value vs Pass-by-reference
    Refer (RiverSizes.java)

// HACK: https://stackoverflow.com/questions/184710/what-is-the-difference-between-a-deep-copy-and-a-shallow-copy
// HACK:https://www.cs.utexas.edu/~scottm/cs307/handouts/deepCopying.htm
// HACK: https://dzone.com/articles/java-copy-shallow-vs-deep-in-which-you-will-swim
// HACK: https://stackoverflow.com/questions/715650/how-to-clone-arraylist-and-also-clone-its-contents
24) Shallow-copy vs deep-copy
    A shallow copy of an object copies the ‘main’ object, but doesn’t copy the inner objects. The ‘inner objects’ are shared between the original object and its copy.

    Unlike the shallow copy, a deep copy is a fully independent copy of an object. If we copied our Person object, we would copy the entire object structure.

// HACK: https://www.geeksforgeeks.org/autoboxing-unboxing-java/
25) Autoboxing and Unboxing: 
    Refer( 290.java)

// HACK: https://www.techiedelight.com/find-inorder-predecessor-given-key-bst/
// HACK: https://www.geeksforgeeks.org/inorder-successor-in-binary-search-tree/
26) Inorder successor vs Inorder predecessor: 

27) Different values that can be represented with 'k' bits. 
    Unsigned: 0 to 2^(k)-1
    Signed: -2^(k-1) to 2^(k-1) -1

    Power(in bits)    Exact Value         Approx Value        Bytes
    ---------------------------------------------------------------
    7                             128
    8                             256
    10                           1024   1 thousand           1 KB
    16                         65,536                       64 KB
    20                      1,048,576   1 million            1 MB
    30                  1,073,741,824   1 billion            1 GB
    32                  4,294,967,296                        4 GB
    40              1,099,511,627,776   1 trillion           1 TB

// HACK: https://www.youtube.com/watch?v=Zq4upTEaQyM
28) Backtracking: (Refer 22.java)
    a) Choices
    b) Constraints
    c) Goal

29) CompareTo (function used in Comparator): 
    Comparator by default sort it in "ascending" order.
    // -1 : o1 < o2 ( o1 should appear first )
    // 0 : o1 == o2
    // +1 : o1 > o2 ( o2 should appear first )

QUESTION JARGON
    1) Increasing vs Non-decreasing: 
    Increasing means that every element is greater than the one before it. Non-decreasing means that no element is less than the element before it, or in other words: that every element is greater than or equal to the one before it

    2) In-place: 
    In-place means we should not be allocating any space for extra array. But we are allowed to modify the existing array.

    3) One pass OR Single-pass: 
    In computing, a one-pass algorithm is a streaming algorithm which reads its input exactly once, in order, without unbounded buffering. A one-pass algorithm generally requires O(n) time and less than O(n) storage (typically O(1)), where n is the size of the input.

STUDY STRATEGY:

    1) Pick a question.
    2) Set a timer for 25 minutes.
    3) Allocate the first 5 minutes to understand the problem and ask/answer clarifying questions to yourself.
    4) Spend the next 20 minutes solving the problem on paper & pen/pencil (until timer rings).
    5) Spend the next 10 minutes studying the solution.
    6) Stop. Even if you’re in the middle of something important like trying to understand the solution. Do not spend more than 30–35 minutes per question.
    7) Record activity on your progress chart.
    8) Revisit the question next week.

Work Flow: 
UI -> REST PROXY -> APIGEE -> ORCHESTRATOR -> APIGEE -> REST service -> DB

Big-Oh Notation
1 < logn < sqrt(n) < n < n * logn < n^2 < n^3 < .... < 2^n < 3^n < .... < n^n